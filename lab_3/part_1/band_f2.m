[signal,fs] = audioread('speech_36.wav'); %reading audio file

Hb = bandf2; %discrete-time filter object
filtered_signal = filter(Hb, signal); %filter function

audiowrite('filtered_audio.wav', filtered_signal, fs); %creating new audio file

[x,Fs] = audioread('filtered_audio.wav'); %reading audio file

% plotting original frequancy (frequency vs amplitude)
nfft = 2^10;
x_orig = fft(signal, nfft);
fstep = Fs/nfft;
fvec = fstep*(0: nfft/2-1);
fresp_orig = 2*abs(x_orig(1:nfft/2));

%plotting filtered frequency
x_filter = fft(x, nfft);
fresp_filter = 2*abs(x_filter(1:nfft/2));

%plotting stuff
figure
hold on;
plot(fvec,fresp_orig, 'g', 'DisplayName', 'Original Signal');
plot(fvec, fresp_filter, 'r', 'DisplayName', 'Filtered Signal');
title('Original vs Filtered Signal');
xlabel('Frequency (Hz)');
ylabel('|X(f)|');
legend('show');
hold off;

%appropriately-quantised
quant_appr = quantizer('fixed', 'round', 'saturate', [10 9]); % 10 bit word with 9 fractional bits (quantizer settings)
q_appr = quantize(quant_appr, Hb.Numerator); %applying settings to filter coeficients
quant_Hd_appr = dfilt.dffir(q_appr); % creating new filter with quantised coefficients
quant_appr_filter = filter(quant_Hd_appr, signal); %filtering signal 
fvtool(Hb, quant_Hd_appr); %comparing frequency response of filters

audiowrite("appropriately_quantised.wav", quant_appr_filter, Fs); %creating new audio file


%over-quantised
quant_over = quantizer('fixed', 'round', 'saturate', [5 4]); % 5 bit word with 4 fractional bits (quantizer settings)
q_over = quantize(quant_over, Hb.Numerator); %applying settings to filter coeficients
quant_Hd_over = dfilt.dffir(q_over); % creating new filter with quantised coefficients
quant_over_filter = filter(quant_Hd_over, signal); %filtering signal 
fvtool(Hb, quant_Hd_over);  %comparing frequency response of filters

audiowrite("over_quantised.wav", quant_over_filter, Fs); %creating new audio file

%under-quantised
quant_under = quantizer('fixed', 'round', 'saturate', [25 24]); % 25 bit word with 24 fractional bits (quantizer settings)
q_under = quantize(quant_under, Hb.Numerator); %applying settings to filter coeficients
quant_Hd_under = dfilt.dffir(q_under); % creating new filter with quantised coefficients
quant_under_filter = filter(quant_Hd_under, signal); %filtering signal 
fvtool(Hb, quant_Hd_under); %comparing frequency response of filters

audiowrite("under_quantised.wav", quant_under_filter, Fs); %creating new audio file

function Hd = bandf2
%BAND_F2 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.13 and Signal Processing Toolbox 9.1.
% Generated on: 15-Oct-2024 16:31:26

% Equiripple Bandstop filter designed using the FIRPM function.

% All frequency values are in Hz.
Fs = 16000;  % Sampling Frequency

Fpass1 = 3800;             % First Passband Frequency
Fstop1 = 4000;             % First Stopband Frequency
Fstop2 = 4250;             % Second Stopband Frequency
Fpass2 = 4450;             % Second Passband Frequency
Dpass1 = 0.057501127785;   % First Passband Ripple
Dstop  = 0.001;            % Stopband Attenuation
Dpass2 = 0.0057563991496;  % Second Passband Ripple
dens   = 20;               % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass1 Fstop1 Fstop2 Fpass2]/(Fs/2), [1 0 ...
                          1], [Dpass1 Dstop Dpass2]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]
end
